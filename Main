TRAFFIC LIGHT WITH TIME COUNTER


module Traffic_light(
    input clk,
    input rst,
    output reg [2:0] light_N,  // North lights
    output reg [2:0] light_E,  // East lights
    output reg [2:0] light_S,  // South lights
    output reg [2:0] light_W,   // West lights
    output reg [3:0] wait_time  // Counter for waiting time
);

    // State Definitions
    parameter S_GREEN_N = 3'b000, 
              S_YELLOW_N = 3'b001,
              S_RED_N_GREEN_E = 3'b010, 
              S_RED_N_YELLOW_E = 3'b011,
              S_RED_E_GREEN_S = 3'b100, 
              S_RED_E_YELLOW_S = 3'b101,
              S_RED_S_GREEN_W = 3'b110, 
              S_RED_S_YELLOW_W = 3'b111,
              S_RED_W_GREEN_N = 4'b1000, 
              S_RED_W_YELLOW_N = 4'b1001;

    reg [3:0] count;
    reg [3:0] current_state, next_state;

    // Timing Parameters
    parameter GREEN_TIME = 10, 
              YELLOW_TIME = 2;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            current_state <= S_GREEN_N;
            count <= 0;
            wait_time <= 0;
        end else begin
            if (count < (current_state == S_YELLOW_N ? YELLOW_TIME : GREEN_TIME)) begin
                count <= count + 1;
                wait_time <= wait_time + 1; // Increment wait time counter
            end else begin
                current_state <= next_state;
                count <= 0;
                wait_time <= 0; // Reset wait time counter
            end
        end
    end

    always @(*) begin
        // Default outputs
        light_N = 3'b100; // Red
        light_E = 3'b100; // Red
        light_S = 3'b100; // Red
        light_W = 3'b100; // Red
        
        case (current_state)
            S_GREEN_N: begin
                light_N = 3'b001; // Green
                next_state = S_YELLOW_N;
            end
            S_YELLOW_N: begin
                light_N = 3'b010; // Yellow
                next_state = S_RED_N_GREEN_E;
            end
            S_RED_N_GREEN_E: begin
                light_E = 3'b001; // Green
                next_state = S_RED_N_YELLOW_E;
            end
            S_RED_N_YELLOW_E: begin
                light_E = 3'b010; // Yellow
                next_state = S_RED_E_GREEN_S;
            end
            S_RED_E_GREEN_S: begin
                light_S = 3'b001; // Green
                next_state = S_RED_E_YELLOW_S;
            end
            S_RED_E_YELLOW_S: begin
                light_S = 3'b010; // Yellow
                next_state = S_RED_S_GREEN_W;
            end
            S_RED_S_GREEN_W: begin
                light_W = 3'b001; // Green
                next_state = S_RED_S_YELLOW_W;
            end
            S_RED_S_YELLOW_W: begin
                light_W = 3'b010; // Yellow
                next_state = S_RED_W_GREEN_N;
            end
            S_RED_W_GREEN_N: begin
                light_N = 3'b001; // Green
                next_state = S_RED_W_YELLOW_N;
            end
            S_RED_W_YELLOW_N: begin
                light_N = 3'b010; // Yellow
                next_state = S_GREEN_N;
            end
            default: begin
                light_N = 3'b100; // Default to red
                light_E = 3'b100;
                light_S = 3'b100;
                light_W = 3'b100;
                next_state = S_GREEN_N; // Reset to initial state
            end
        endcase
    end
endmodule




TESTBENCH - 

module Traffic_light_TB;
    reg clk, rst;
    wire [2:0] light_N, light_E, light_S, light_W;
    wire [3:0] wait_time; // Output for waiting time

    // Instantiate the Traffic Light Controller
    Traffic_light dut (
        .clk(clk), 
        .rst(rst), 
        .light_N(light_N), 
        .light_E(light_E), 
        .light_S(light_S), 
        .light_W(light_W),
        .wait_time(wait_time) // Connect wait time output
    );

    initial begin
        clk = 1'b0;
        forever #10 clk = ~clk; // Clock period of 20 time units
    end

    initial begin
        rst = 1; // Assert reset
        #15 rst = 0; // Release reset after some time
        #200; // Run the simulation for longer
        $finish; // End the simulation
    end

    initial begin
        $monitor("Time: %0t | light_N: %b | light_E: %b | light_S: %b | light_W: %b | wait_time: %d", 
                 $time, light_N, light_E, light_S, light_W, wait_time);
    end
endmodule


CLOCK DIVIDER

module Clock_Divider(
    input clk,  // Input clock from FPGA (50 MHz)
    input rst,  // Reset signal
    output reg slow_clk  // Slower clock output
);
    reg [25:0] counter; // 26-bit counter for division

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 0;
            slow_clk <= 0;
        end else begin
            if (counter == 25000000) begin // Divide 50 MHz clock to 1 Hz
                counter <= 0;
                slow_clk <= ~slow_clk; // Toggle clock
            end else begin
                counter <= counter + 1;
            end
        end
    end
endmodule


module Traffic_Light_Top(
    input clk,        // FPGA clock (50 MHz)
    input rst,        // Reset signal
    output [2:0] light_N,  // North lights
    output [2:0] light_E,  // East lights
    output [2:0] light_S,  // South lights
    output [2:0] light_W,  // West lights
    output [3:0] wait_time // Wait time counter
);

    wire slow_clk; // Slower clock from the divider

    // Instantiate the clock divider
    Clock_Divider clk_div (
        .clk(clk),
        .rst(rst),
        .slow_clk(slow_clk)
    );

    // Instantiate the traffic light controller
    Traffic_light traffic_light_ctrl (
        .clk(slow_clk),
        .rst(rst),
        .light_N(light_N),
        .light_E(light_E),
        .light_S(light_S),
        .light_W(light_W),
        .wait_time(wait_time)
    );
endmodule



module top (
    input clk,
    input rst,
    output [6:0] hex0, // 7-segment display for wait_time (units)
    output [6:0] hex1, // 7-segment display for wait_time (tens)
    output [2:0] light_N,
    output [2:0] light_E,
    output [2:0] light_S,
    output [2:0] light_W
);
    wire [3:0] wait_time;

    // Instantiate the traffic light module
    traffic traffic_inst (
        .clk(clk),
        .rst(rst),
        .light_N(light_N),
        .light_E(light_E),
        .light_S(light_S),
        .light_W(light_W),
        .wait_time(wait_time)
    );

    // Split wait_time into units and tens
    wire [3:0] wait_time_units = wait_time % 10;
    wire [3:0] wait_time_tens = wait_time / 10;

    // Instantiate BCD to 7-segment decoders
    bcd_to_7seg u0 (.bcd(wait_time_units), .seg(hex0)); // Units place
    bcd_to_7seg u1 (.bcd(wait_time_tens), .seg(hex1)); // Tens place
endmodule




